* fix other binaries (s390-zipl, ppc_rom)

* permissions/ownership for /dev/vhost_net???

* startup script for qemu-guest-agent: check dependencies & runlevels.

* maybe provide activation for udev & systemd:

   SUBSYSTEM=="virtio-ports", ATTR{name}=="org.qemu.guest_agent.0", \
     TAG+="systemd" ENV{SYSTEMD_WANTS}="qemu-guest-agent.service"

  and dev-virtio/ports-org.qemu.guest_agent.0.device activation
  for systemd.

* decide what to do with qemu-bridge-helper (#691138)

* -dbg package(s): these are very large, there are either
  many of them (esp. if we split qemu-system or maybe qemu-user
  to per-target pkgs) or they're unflexible, adds significant
  data to Packages files (which are fetched by everyone), and
  gains little (for the lifetime of qemu-kvm-dbg it was useful
  only once).  I think we will not provide them.

  Below are some old observations about this.

  Current linux-user binaries are built in a way that results in inclusion
  of .gnu_debuglink section in the binaries.  These sections comes from
  Scrt1.o, crt1.o and crt0.o files.  This makes dh_strip --dbg-package,
  which calls

     objcopy --add-gnu-debuglink $dbgfile $binary

  to fail with a "very understandable" error message:

     objcopy:cannot create debug link section ...: Invalid operation

  (file a bugreport against binutils to make this message more explicit)

  A workaround is to strip .gnu_debuglink section using the same objcopy
  first, or add a line

     /DISCARD/ : { *(.gnu_debuglink) }

  to all the *.ld scripts which are used to produce linux-user binaries,
  just like it is done in roms/qemu-palcode/palcode.ld .

  We can have just one qemu-dbg package (with versioned Breaks maybe, or
  without dependencies at all), or we can have qemu-system-dbg, qemu-user-dbg,
  qemu-user-static-dbg.  Current (as of 1.3) size of all debug symbols on i386:

	total 416M
	 2.4M qemu-alpha
	 3.7M qemu-arm
	 3.9M qemu-armeb
	 2.3M qemu-cris
	 3.8M qemu-i386
	 2.5M qemu-m68k
	 3.9M qemu-mips
	 3.8M qemu-mipsel
	 2.2M qemu-or32
	 5.5M qemu-ppc
	 8.4M qemu-ppc64
	 8.4M qemu-ppc64abi32
	 2.9M qemu-s390x
	 2.3M qemu-sh4
	 2.5M qemu-sh4eb
	 2.5M qemu-sparc
	 3.2M qemu-sparc32plus
	 3.4M qemu-sparc64
	 2.1M qemu-unicore32
	 4.5M qemu-x86_64

	 2.7M qemu-alpha-static
	 4.0M qemu-arm-static
	 4.2M qemu-armeb-static
	 2.6M qemu-cris-static
	 4.0M qemu-i386-static
	 2.8M qemu-m68k-static
	 2.4M qemu-microblaze
	 2.2M qemu-microblazeel
	 2.7M qemu-microblaze-static
	 2.5M qemu-microblazeel-static
	 4.2M qemu-mips-static
	 4.1M qemu-mipsel-static
	 2.5M qemu-or32-static
	 5.9M qemu-ppc-static
	 8.7M qemu-ppc64-static
	 8.6M qemu-ppc64abi32-static
	 3.1M qemu-s390x-static
	 2.6M qemu-sh4-static
	 2.8M qemu-sh4eb-static
	 2.7M qemu-sparc-static
	 3.5M qemu-sparc32plus-static
	 3.6M qemu-sparc64-static
	 2.4M qemu-unicore32-static
	 4.7M qemu-x86_64-static

	 9.7M qemu-system-alpha
	  14M qemu-system-arm
	 6.8M qemu-system-cris
	  13M qemu-system-i386
	 6.7M qemu-system-lm32
	 8.8M qemu-system-m68k
	 6.7M qemu-system-microblaze
	 6.7M qemu-system-microblazeel
	  12M qemu-system-mips
	  14M qemu-system-mips64
	  14M qemu-system-mips64el
	  12M qemu-system-mipsel
	 6.6M qemu-system-or32
	  14M qemu-system-ppc
	  17M qemu-system-ppc64
	  14M qemu-system-ppcemb
	 7.6M qemu-system-s390x
	 9.0M qemu-system-sh4
	 9.0M qemu-system-sh4eb
	 7.3M qemu-system-sparc
	  11M qemu-system-sparc64
	 6.5M qemu-system-unicore32
	  14M qemu-system-x86_64
	 6.7M qemu-system-xtensa
	 6.7M qemu-system-xtensaeb

	 1.8M qemu-img
	 1.8M qemu-io
	 1.8M qemu-nbd
	  69K virtfs-proxy-helper

  Total size of the qemu-dbg (all the above) .deb is ~150Mb when compressed
  using gzip or 90Mb with xz.  In both cases -dbg is much larger than sum of
  all other binary packages.
